#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_TENTATIVAS 6
#define TAMANHO_MAXIMO 100

// Declaração de funções
void mostrarForca(int erros);
void exibirAnimacaoVitoria();
void inicializarResposta(char resposta[], char frase[], int *nchar);
void exibirRespostaAtual(char resposta[], int nchar);
void exibirErros(char erros[], int contador);
int checarVitoria(char resposta[], char frase[], int nchar);
void limparBuffer();

int main() {
    char frase[TAMANHO_MAXIMO], resposta[TAMANHO_MAXIMO], tentativa, confirmar, continuar = 'S';
    int contador, nchar, certo, i;
    char erros[MAX_TENTATIVAS] = { ' ' };

    do {
        system("cls");
        puts("___________   \n|         |   \n|        _|_\n|         O    \n|        /|\\   \n|        / \\ \n|");
        puts("Jogo de Forca por Felipe Mello - Versao 2.5\n");
        puts("Instrucoes: Esse jogo e para ser jogado de duas pessoas. A primeira pessoa digita uma palavra ou frase e a segunda terá tenta advinhar e só pode errar 5 vezes.\n");

        confirmar = 'N';
        while (toupper(confirmar) != 'S') {
            contador = 0;
            printf("\nDigite a palavra ou frase (jogador 1): ");
            limparBuffer();
            fgets(frase, TAMANHO_MAXIMO, stdin);
            frase[strcspn(frase, "\n")] = 0;  // Remover o '\n' do final

            printf("Palavra/Frase: \"%s\". Confirmar? (S/N): ", frase);
            scanf(" %c", &confirmar);
        }

        system("cls");
        inicializarResposta(resposta, frase, &nchar);

        while (contador < MAX_TENTATIVAS) {
            mostrarForca(contador);
            exibirRespostaAtual(resposta, nchar);
            exibirErros(erros, contador);

            printf("\nDigite uma letra: ");
            limparBuffer();
            tentativa = tolower(getchar());

            certo = 0;
            for (i = 0; i < nchar; i++) {
                if (frase[i] == tentativa) {
                    resposta[i] = tentativa;
                    certo = 1;
                }
            }

            if (!certo) {
                erros[contador] = tentativa;
                contador++;
            }

            if (checarVitoria(resposta, frase, nchar)) {
                exibirAnimacaoVitoria();
                break;
            }

            system("cls");
        }

        if (contador == MAX_TENTATIVAS) {
            mostrarForca(contador);
            printf("Voce perdeu! A palavra era: \"%s\"\n", frase);
        }

        printf("Deseja jogar novamente? (S/N): ");
        limparBuffer();
        continuar = toupper(getchar());

    } while (continuar == 'S');

    return 0;
}

// Função para exibir a forca de acordo com o número de erros
void mostrarForca(int erros) {
    const char *desenhos[] = {
        "___________   \n|         |   \n|        _|_\n|              \n|              \n|\n|",
        "___________   \n|         |   \n|        _|_\n|         O    \n|              \n|\n|",
        "___________   \n|         |   \n|        _|_\n|         O    \n|         |    \n|\n|",
        "___________   \n|         |   \n|        _|_\n|         O    \n|        /|    \n|\n|",
        "___________   \n|         |   \n|        _|_\n|         O    \n|        /|\\   \n|\n|",
        "___________   \n|         |   \n|        _|_\n|         O    \n|        /|\\   \n|        / \n|",
        "___________   \n|         |   \n|        _|_\n|         O    \n|        /|\\   \n|        / \\ \n|"
    };
    printf("%s\n", desenhos[erros]);
}

// Função para inicializar a resposta com underscores
void inicializarResposta(char resposta[], char frase[], int *nchar) {
    int i;
    *nchar = strlen(frase);
    for (i = 0; i < *nchar; i++) {
        resposta[i] = (frase[i] == ' ') ? ' ' : '_';
    }
    resposta[*nchar] = '\0';
}

// Função para exibir a resposta atual
void exibirRespostaAtual(char resposta[], int nchar) {
	int i = 0;
    for (i = 0; i < nchar; i++) {
        printf("%c ", resposta[i]);
    }
    printf("\n");
}

// Função para exibir as letras erradas
void exibirErros(char erros[], int contador) {
    printf("Letras erradas: ");
    int i = 0;
    for (i = 0; i < contador; i++) {
        printf("%c ", erros[i]);
    }
    printf("\n");
}

// Função para verificar se o jogador venceu
int checarVitoria(char resposta[], char frase[], int nchar) {
	int i = 0;
    for (i = 0; i < nchar; i++) {
        if (resposta[i] != frase[i]) {
            return 0;
        }
    }
    return 1;
}

// Função para exibir animação de vitória
void exibirAnimacaoVitoria() {
	int animacao = 0;
    for (animacao = 0; animacao < 7; animacao++) {
        system("cls");
        printf("Parabens!! Voce Venceu!!\n");
        printf("___________ \n|         | \n|        _|_\n|        \\O/\n|         | \n|        / \\\n\n");
    }
}

// Função para limpar o buffer do teclado
void limparBuffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF) {}
}
